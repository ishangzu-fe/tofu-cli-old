#! /usr/bin/env node

// require('../lib/check-version')();

const program = require('commander');
const exec = require('child_process').exec;
const config = require('../config');
const log = require('../lib/log').log;
const ora = require('ora');

program
    .option('--cnpm', '使用cnpm来代替npm')
    .option('--yarn', '使用yarn来代替npm')
    .option('--npm', '使用npm来代替设置的工具')
    .parse(process.argv);

const execParallel = (commandArr) => {
    const spinner_1 = new ora('正在升级i-tofu中...');
    const spinner_2 = new ora('正在升级tofu-cli中...');
    spinner_1.start();
    log();
    spinner_2.start();

    exec(commandArr[0], (error, stdout, stderr) => {
        spinner_1.stop();        
        if (error) {
            console.error(`exec error: ${error}`);
            return;
        } else {
            log('升级i-tofu成功！', 'green');
            log();
        }
    });
    exec(commandArr[1], (error, stdout, stderr) => {
        spinner_2.stop();
        if (error) {
            console.error(`exec error: ${error}`);
            return;
        } else {
            log('升级tofu-cli成功！', 'green');
        }
    })
}

if (program.cnpm) {
    execParallel(['cnpm install i-tofu@latest', 'cnpm install -g tofu-cli@latest']);
} else if (program.yarn) {
    execParallel(['yarn add i-tofu@latest', 'yarn global add tofu-cli@latest']);
} else if (program.npm) {
    execParallel(['npm install i-tofu@latest', 'npm install -g tofu-cli@latest']);
} else {
    execParallel([config.tool + ' install i-tofu@latest', config.tool + ' install -g tofu-cli@latest']);
}
