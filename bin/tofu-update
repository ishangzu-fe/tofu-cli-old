#! /usr/bin/env node

const program = require('commander')
const exec = require('child_process').exec
const execSync = require('child_process').execSync
const config = require('../config')
const log = require('../lib/log').log
const logSuccess = require('../lib/log').logSuccess
const ora = require('ora')
const downloadFromGit = require('../lib/downloadFromGit')
const copy = require('../lib/copy')
const resolveCwd = require('../lib/utils').resolveCwd
const fs = require('fs')
const remove = require('../lib/remove')

program
    .option('-t, --template', '仅更新模板')
    .option('--cnpm', '使用cnpm来代替npm')
    .option('--yarn', '使用yarn来代替npm')
    .option('--npm', '使用npm来代替设置的工具')
    .parse(process.argv)

/**
 * 更新模板
 */
const updateBoilerplate = async () => {
    await downloadFromGit('ishangzu-fe/tofu-boilerplate', resolveCwd('temp'), false)
    const handledFiles = await copyAndRemove()
    return handledFiles

    async function copyAndRemove () {
        let arr = []
        
        let msgArr_1 = await copy(resolveCwd('temp/' + 'src/views/portal'), resolveCwd('src/views/portal'))
        let msgArr_2 = await copy(resolveCwd('temp/' + 'src/main.js'), resolveCwd('src/main.js'))
        let msgArr_3 = await copy(resolveCwd('temp/' + 'src/main.scss'), resolveCwd('src/main.scss'))
        let msgArr_4 = await copy(resolveCwd('temp/' + '.gitignore'), resolveCwd('.gitignore'))

        arr = arr.concat(msgArr_1, msgArr_2, msgArr_3, msgArr_4)
        const removedFiles = await remove(resolveCwd('temp'))
        return arr
    }
}

const logCopiedFiles = (files) => {
    log()
    log('更新了以下文件', 'green')
    files.forEach(file => {
        logSuccess(file)
    })
}

/**
 * 执行多个命令
 * @param commandArr 
 */
const execParallel = async (commandArr) => {
    const spinner_1 = new ora('正在升级tofu-boilerplate...').start()
    const files = await updateBoilerplate();
    logCopiedFiles(files)
    spinner_1.stop()

    log()
    const spinner_2 = new ora('正在升级i-tofu...').start()
    log()
    execSync(commandArr[0])

    spinner_2.text = '正在升级tofu-cli...'
    let child = exec(commandArr[1], (error, stdout, stderr) => {
        if (error) {
            throw error
            return
        } else {
            log()
            logSuccess('升级tofu-boilerplate成功')
            logSuccess('升级i-tofu成功')
            logSuccess('升级tofu-cli成功')
            spinner_2.stop()
        }
    })
    child.stdout.on('data', msg => {
        log(msg, 'yellow')
    })
}

if (program.template) {
    const files = updateBoilerplate().then(logCopiedFiles)
    return
}

if (program.cnpm) {
    execParallel(['cnpm install i-tofu@latest', 'cnpm install -g tofu-cli@latest'])
} else if (program.yarn) {
    execParallel(['yarn add i-tofu@latest', 'yarn global add tofu-cli@latest'])
} else if (program.npm) {
    execParallel(['npm install i-tofu@latest', 'npm install -g tofu-cli@latest'])
} else {
    execParallel([config.tool + ' install i-tofu@latest', config.tool + ' install -g tofu-cli@latest'])
}
